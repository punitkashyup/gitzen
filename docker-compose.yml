services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gitzen-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-gitzen}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-gitzen_dev_password}
      POSTGRES_DB: ${POSTGRES_DB:-gitzen}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-gitzen}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gitzen-network

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: gitzen-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-gitzen_redis_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gitzen-network

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: gitzen-backend
    restart: unless-stopped
    environment:
      # App Config
      APP_ENV: ${APP_ENV:-development}
      DEBUG: ${DEBUG:-true}
      API_HOST: ${API_HOST:-0.0.0.0}
      API_PORT: ${API_PORT:-8000}
      
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-gitzen}:${POSTGRES_PASSWORD:-gitzen_dev_password}@postgres:5432/${POSTGRES_DB:-gitzen}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-gitzen_redis_password}@redis:6379/0
      
      # GitHub OAuth
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID:-}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET:-}
      GITHUB_CALLBACK_URL: ${GITHUB_CALLBACK_URL:-http://localhost:8000/auth/github/callback}
      
      # JWT
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:5173}
      
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      # Mount source code for hot-reload
      - ./backend:/app
      # Don't override node_modules/venv
      - /app/__pycache__
      - /app/.venv
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - gitzen-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend Dashboard (React + Vite)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: gitzen-frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
      VITE_APP_NAME: ${VITE_APP_NAME:-Gitzen}
      NODE_ENV: ${NODE_ENV:-development}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      # Mount source code for hot-reload
      - ./frontend:/app
      # Don't override node_modules
      - /app/node_modules
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - gitzen-network
    command: npm run dev -- --host 0.0.0.0 --port 3000

volumes:
  postgres_data:
    name: gitzen-postgres-data
  redis_data:
    name: gitzen-redis-data

networks:
  gitzen-network:
    name: gitzen-network
    driver: bridge
