name: Secret Scan

on:
  # Trigger on pull requests
  pull_request:
    branches: [ main, develop ]
  
  # Trigger on pushes to main
  push:
    branches: [ main ]
  
  # Scheduled scans (weekly on Mondays at 9 AM UTC)
  schedule:
    - cron: '0 9 * * 1'
  
  # Allow manual triggers
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: write
  statuses: write

jobs:
  scan-secrets:
    name: Scan for Secrets
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive scanning
      
      - name: Run Gitleaks
        id: gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Optional for enterprise features
      
      - name: Upload Gitleaks Report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: results.json
          retention-days: 30
      
      - name: Extract Metadata (Privacy-Safe)
        if: always()
        id: extract-metadata
        run: |
          # Install jq for JSON processing
          sudo apt-get update && sudo apt-get install -y jq
          
          # Check if results exist
          if [ ! -f "results.json" ]; then
            echo "No findings detected"
            echo "findings_count=0" >> $GITHUB_OUTPUT
            echo '{"findings":[]}' > metadata.json
            exit 0
          fi
          
          # Extract privacy-safe metadata only (NO CODE OR SECRETS)
          jq '[.[] | {
            file_path: .File,
            line_number: .StartLine,
            commit_hash: .Commit,
            author_email_hash: (.Email | @sh "echo -n \(.) | sha256sum | cut -d\" \" -f1"),
            secret_type: .RuleID,
            severity: (if .Tags | contains(["high"]) then "high" 
                      elif .Tags | contains(["critical"]) then "critical"
                      else "medium" end),
            rule_id: .RuleID
          }]' results.json > metadata.json
          
          # Count findings
          FINDINGS_COUNT=$(jq 'length' metadata.json)
          echo "findings_count=$FINDINGS_COUNT" >> $GITHUB_OUTPUT
          
          echo "Extracted metadata for $FINDINGS_COUNT findings (privacy-safe)"
      
      - name: Send Report to Dashboard
        if: always()
        env:
          DASHBOARD_API_URL: ${{ secrets.DASHBOARD_API_URL }}
          DASHBOARD_API_KEY: ${{ secrets.DASHBOARD_API_KEY }}
        run: |
          # Prepare scan context
          SCAN_DATA=$(jq -n \
            --arg repo_name "${{ github.repository }}" \
            --arg repo_owner "${{ github.repository_owner }}" \
            --arg branch "${{ github.ref_name }}" \
            --arg commit_hash "${{ github.sha }}" \
            --arg trigger_type "${{ github.event_name }}" \
            --arg pr_number "${{ github.event.pull_request.number }}" \
            --argjson findings "$(cat metadata.json)" \
            '{
              repo_name: $repo_name,
              repo_owner: $repo_owner,
              branch: $branch,
              commit_hash: $commit_hash,
              trigger_type: $trigger_type,
              pr_number: ($pr_number | tonumber // null),
              scan_date: (now | todate),
              findings: $findings
            }')
          
          # Send to dashboard API
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            "${DASHBOARD_API_URL}/api/v1/scans" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${DASHBOARD_API_KEY}" \
            -H "User-Agent: SecretScan-Action/1.0" \
            -d "$SCAN_DATA")
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
            echo "✅ Report sent successfully"
            REPORT_URL=$(echo "$BODY" | jq -r '.reportUrl')
            echo "report_url=$REPORT_URL" >> $GITHUB_OUTPUT
            echo "📊 View detailed report: $REPORT_URL"
          else
            echo "⚠️ Failed to send report (HTTP $HTTP_CODE)"
            echo "$BODY"
          fi
      
      - name: Update GitHub Status
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const findingsCount = '${{ steps.extract-metadata.outputs.findings_count }}';
            const reportUrl = '${{ steps.send-report.outputs.report_url }}';
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: findingsCount > 0 ? 'failure' : 'success',
              description: findingsCount > 0 
                ? `Found ${findingsCount} potential secrets` 
                : 'No secrets detected',
              context: 'Secret Scan',
              target_url: reportUrl || `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });
      
      - name: Comment on PR
        if: always() && github.event_name == 'pull_request' && steps.extract-metadata.outputs.findings_count > 0
        uses: actions/github-script@v7
        with:
          script: |
            const findingsCount = '${{ steps.extract-metadata.outputs.findings_count }}';
            const reportUrl = '${{ steps.send-report.outputs.report_url }}';
            
            const body = `## 🔐 Secret Scan Results
            
            ⚠️ **${findingsCount} potential secret(s) detected** in this pull request.
            
            ### Next Steps:
            1. Review the [detailed report](${reportUrl})
            2. Remove any exposed secrets from the code
            3. Rotate compromised credentials immediately
            4. Consider using environment variables or secret management tools
            
            ### Need Help?
            - [Secret removal guide](https://docs.example.com/removing-secrets)
            - [History cleanup workflow](https://docs.example.com/cleanup)
            
            ---
            *This scan is privacy-preserving and does not store your code or secret values.*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: body
            });
      
      - name: Fail on Findings
        if: steps.extract-metadata.outputs.findings_count > 0
        run: |
          echo "❌ Secret scan failed: ${{ steps.extract-metadata.outputs.findings_count }} potential secrets found"
          echo "Please review and remove any exposed secrets before merging."
          exit 1
